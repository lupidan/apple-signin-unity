fastlane_version "2.226.0"

platform :ios do
  before_all do
    certificate_path = ENV["APPLE_DISTRIBUTION_CERTIFICATE_PATH"]
    certificate_password = ENV["APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD"]
    provisioning_profile_path = ENV["IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH"]
    keychain_name = ENV["KEYCHAIN_NAME"]
    keychain_password = ENV["KEYCHAIN_PASSWORD"]
    
    raise "Missing certificate path" unless certificate_path && !certificate_path.empty?
    raise "Missing certificate password" unless certificate_password && !certificate_password.empty?
    raise "Missing provisioning profile path" unless provisioning_profile_path && !provisioning_profile_path.empty?
    raise "Missing keychain name" unless keychain_name && !keychain_name.empty?
    raise "Missing keychain password" unless keychain_password && !keychain_password.empty?
    
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
    
    import_certificate(
      certificate_path: certificate_path,
      certificate_password: certificate_password,
      keychain_name: keychain_name
    )
    
    install_provisioning_profile(
      path: provisioning_profile_path
    )
  end

  lane :build do
    output_name = ENV["FASTLANE_OUTPUT_NAME"]
    provisioning_profile_path = ENV["IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH"]

    update_project_provisioning(
      xcodeproj: "Unity-iPhone.xcodeproj",
      profile: provisioning_profile_path,
      target_filter: "Unity-iPhone",
      build_configuration: "Release",
      code_signing_identity: "Apple Distribution"
    )

    gym(
      project: "Unity-iPhone.xcodeproj",
      scheme: "Unity-iPhone",
      clean: true,
      output_name: output_name,
      export_method: "app-store",
      codesigning_identity: "Apple Distribution"
    )
  end

  def cleanup
    provisioning_profile_path = ENV["IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH"]
    keychain_name = ENV["KEYCHAIN_NAME"]
    
    sh "rm -f #{provisioning_profile_path}"
    delete_keychain(name: keychain_name)
  end

  after_all do
    cleanup
  end

  error do
    cleanup
  end
end
