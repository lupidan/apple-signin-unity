name: Build Sample Project

on: workflow_dispatch

jobs:
  Ubuntu-Build:
    name: Ubuntu Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version-and-platform:
          #- "6000.0.40f1,StandaloneOSX"
          #- "2022.3.59f1,StandaloneOSX"
          #- "2020.3.48f1,StandaloneOSX"
          #- "2021.3.45f1,StandaloneOSX"

          #- "6000.0.40f1,iOS"
          #- "2022.3.59f1,iOS"
          - "2021.3.45f1,iOS"
          #- "2020.3.48f1,iOS"

    outputs:
      unity_version: ${{ steps.split.outputs.unity_version }}
      target_platform: ${{ steps.split.outputs.target_platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Split Unity Version and Platform (Ubuntu)
        id: split
        env:
          UNITY_VERSION_AND_PLATFORM: ${{ matrix.unity-version-and-platform }}
        run: |
          echo "unity_version=${UNITY_VERSION_AND_PLATFORM%%,*}" >> $GITHUB_OUTPUT
          echo "target_platform=${UNITY_VERSION_AND_PLATFORM##*,}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ./SampleProject~/Library/
          key: Library-${{ steps.split.outputs.target_platform }}-${{ steps.split.outputs.unity_version }}

      - name: Build Unity Project
        uses: game-ci/unity-builder@v4.3.0
        id: unity_build
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ./SampleProject~/
          targetPlatform: ${{ steps.split.outputs.target_platform }}
          unityVersion: ${{ steps.split.outputs.unity_version }}

      - name: Setup fastlane files
        run: |
          if [ ! -d "./build/iOS/iOS" ]; then
            echo "Error: Destination directory ./build/iOS/iOS does not exist!" >&2
            exit 1
          fi

          if [ -d "./build/iOS/iOS/fastlane" ]; then
            echo "Error: fastlane directory already exists in ./build/iOS/iOS!" >&2
            exit 1
          fi
          
          sudo cp -r ./.github/fastlane ./build/iOS/iOS/fastlane

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.split.outputs.target_platform }}_${{ steps.split.outputs.unity_version }}_BuildOutput"
          path: ./build/iOS/iOS/

  # Windows-Build:
  #   name: Windows Build
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       unity-version-and-platform:
  #         - "6000.0.40f1,tvOS"
  #         - "2022.3.59f1,tvOS"
  #         - "2021.3.45f1,tvOS"
  #         - "2020.3.48f1,tvOS"

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Split Unity Version and Platform (Windows)
  #       id: split
  #       env:
  #         UNITY_VERSION_AND_PLATFORM: ${{ matrix.unity-version-and-platform }}
  #       shell: pwsh
  #       run: |
  #         $values = "${{ env.UNITY_VERSION_AND_PLATFORM }}" -split ","
  #         echo "unity_version=$($values[0])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
  #         echo "target_platform=$($values[1])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  #     - uses: actions/cache@v4
  #       with:
  #         path: ./SampleProject~/Library/
  #         key: Library-${{ steps.split.outputs.target_platform }}-${{ steps.split.outputs.unity_version }}

  #     - name: Build Unity Project
  #       uses: game-ci/unity-builder@v4.3.0
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         projectPath: ./SampleProject~/
  #         targetPlatform: ${{ steps.split.outputs.target_platform }}
  #         unityVersion: ${{ steps.split.outputs.unity_version }}

  #     - name: Upload build artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "${{ steps.split.outputs.target_platform }}_${{ steps.split.outputs.unity_version }}_BuildOutput"
  #         path: build

  Build-And-Deploy-Ios:
    uses: ./.github/workflows/build-and-deploy-ios.yml
    needs: Ubuntu-Build
    if: needs.Ubuntu-Build.outputs.target_platform == 'iOS'
    with:
      unity_version: ${{ needs.Ubuntu-Build.outputs.unity_version }}
      artifact_name: "${{ needs.Ubuntu-Build.outputs.target_platform }}_${{ needs.Ubuntu-Build.outputs.unity_version }}_BuildOutput"
    secrets:
      APPLE_DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
      APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
      IOS_DISTRIBUTION_PROVISIONING_PROFILE: ${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE }}
      KEYCHAIN_NAME: ${{ secrets.KEYCHAIN_NAME }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APP_STORE_AUTH_KEY: ${{ secrets.APP_STORE_AUTH_KEY }}
    

          