name: Build Sample Project

on: workflow_dispatch

jobs:
  Ubuntu-Build:
    name: Ubuntu Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version-and-platform:
          #- "6000.0.40f1,StandaloneOSX"
          #- "2022.3.59f1,StandaloneOSX"
          #- "2020.3.48f1,StandaloneOSX"
          #- "2021.3.45f1,StandaloneOSX"

          - "6000.0.40f1,iOS"
          # - "2022.3.59f1,iOS"
          # - "2021.3.45f1,iOS"
          #- "2020.3.48f1,iOS"

    outputs:
      unity_version: ${{ steps.split.outputs.unity_version }}
      target_platform: ${{ steps.split.outputs.target_platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Split Unity Version and Platform (Ubuntu)
        id: split
        env:
          UNITY_VERSION_AND_PLATFORM: ${{ matrix.unity-version-and-platform }}
        run: |
          echo "unity_version=${UNITY_VERSION_AND_PLATFORM%%,*}" >> $GITHUB_OUTPUT
          echo "target_platform=${UNITY_VERSION_AND_PLATFORM##*,}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ./SampleProject~/Library/
          key: Library-${{ steps.split.outputs.target_platform }}-${{ steps.split.outputs.unity_version }}

      - name: Build Unity Project
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ./SampleProject~/
          targetPlatform: ${{ steps.split.outputs.target_platform }}
          unityVersion: ${{ steps.split.outputs.unity_version }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.split.outputs.target_platform }}_${{ steps.split.outputs.unity_version }}_BuildOutput"
          path: ./build/iOS/iOS/

  # Windows-Build:
  #   name: Windows Build
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       unity-version-and-platform:
  #         - "6000.0.40f1,tvOS"
  #         - "2022.3.59f1,tvOS"
  #         - "2021.3.45f1,tvOS"
  #         - "2020.3.48f1,tvOS"

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Split Unity Version and Platform (Windows)
  #       id: split
  #       env:
  #         UNITY_VERSION_AND_PLATFORM: ${{ matrix.unity-version-and-platform }}
  #       shell: pwsh
  #       run: |
  #         $values = "${{ env.UNITY_VERSION_AND_PLATFORM }}" -split ","
  #         echo "unity_version=$($values[0])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
  #         echo "target_platform=$($values[1])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  #     - uses: actions/cache@v4
  #       with:
  #         path: ./SampleProject~/Library/
  #         key: Library-${{ steps.split.outputs.target_platform }}-${{ steps.split.outputs.unity_version }}

  #     - name: Build Unity Project
  #       uses: game-ci/unity-builder@v4.3.0
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         projectPath: ./SampleProject~/
  #         targetPlatform: ${{ steps.split.outputs.target_platform }}
  #         unityVersion: ${{ steps.split.outputs.unity_version }}

  #     - name: Upload build artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "${{ steps.split.outputs.target_platform }}_${{ steps.split.outputs.unity_version }}_BuildOutput"
  #         path: build

  iOS-Build-and-Upload:
    name: iOS Build and Upload
    runs-on: macos-latest
    needs: Ubuntu-Build
    if: needs.Ubuntu-Build.outputs.target_platform == 'iOS'

    steps:
      - name: Install the Apple certificate and provisioning profile
        env:
          APPLE_DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
          APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          IOS_DISTRIBUTION_PROVISIONING_PROFILE: ${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          
        run: |
          APPLE_DISTRIBUTION_CERTIFICATE_PATH=$RUNNER_TEMP/AppleDistribution.p12
          IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/IosDistribution.mobileprovision
          MACOS_KEYCHAIN_PATH=$RUNNER_TEMP/AppSigning.keychain-db

          # Import certificate and provisioning profile
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE" | base64 --decode -o $APPLE_DISTRIBUTION_CERTIFICATE_PATH
          echo -n "$IOS_DISTRIBUTION_PROVISIONING_PROFILE" | base64 --decode -o $IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH

          # Create temporary keychain
          security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $MACOS_KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $MACOS_KEYCHAIN_PATH
          security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $MACOS_KEYCHAIN_PATH

          # Import certificate to keychain
          security import $APPLE_DISTRIBUTION_CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $MACOS_KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$MACOS_KEYCHAIN_PASSWORD" $MACOS_KEYCHAIN_PATH
          security list-keychain -d user -s $MACOS_KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles


      - name: Download Unity iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: "${{ needs.Ubuntu-Build.outputs.target_platform }}_${{ needs.Ubuntu-Build.outputs.unity_version }}_BuildOutput"
          path: ./iOS-Xcodeproj

      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode_16.2.app/Contents/Developer'
    
      - name: Build IPA with Fastlane
        env:
          FASTLANE_SKIP_INTERACTIVE: true
        run: |
          cd ./iOS-Xcodeproj
          fastlane gym \
            --scheme "Unity-iPhone" \
            --export_method app-store \
            --output_directory "../iOS-IPA" \
            --output_name "${{ needs.Ubuntu-Build.outputs.target_platform }}_${{ needs.Ubuntu-Build.outputs.unity_version }}.ipa" \
            --verbose

      - name: Upload Xcode Log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "${{ needs.Ubuntu-Build.outputs.target_platform }}_${{ needs.Ubuntu-Build.outputs.unity_version }}_Log"
          path: "/Users/runner/Library/Logs/gym/AppleSignInForUnity-Unity-iPhone.log"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ needs.Ubuntu-Build.outputs.target_platform }}_${{ needs.Ubuntu-Build.outputs.unity_version }}_IPA_Artifact"
          path: ./iOS-IPA
      
      - name: Cleanup Keychain and files
        env:
          APPLE_DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
          APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          IOS_DISTRIBUTION_PROVISIONING_PROFILE: ${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          MACOS_KEYCHAIN_PATH=$RUNNER_TEMP/AppSigning.keychain-db
          security delete-keychain $MACOS_KEYCHAIN_PATH
          rm -f $APPLE_DISTRIBUTION_CERTIFICATE_PATH $IOS_DISTRIBUTION_PROVISIONING_PROFILE_PATH

          